//
//  DefaultConsoleProvider.swift
//  Console
//
//  Created by Cao Phuoc Thanh on 4/13/21.
//

import Foundation

public struct DefaultConsoleProvider: ConsoleProvider {
    public func mearsure(name: String?, file: String, function: String, interval: TimeInterval) {
        print("[üç≠][mearsure]","[\(Date())]","[\(file.components(separatedBy: "/").last ?? "")]","[\(Thread.current.name)] \(function)", name ?? "", "‚ñ∫ \(interval) seconds")
    }
    public func log(_ items: Any..., separator: String, terminator: String, file: String, function: String) {
        print("[‚õ±][log]","[\(Date())]","[\(file.components(separatedBy: "/").last ?? "")]","[\(Thread.current.name)] \(function) ‚ñ∫",(items.first as? [Any])?.map { "\($0)"}.joined(separator: separator) ?? "")
    }
    public func notice(_ items: Any..., separator: String, terminator: String, file: String, function: String) {
        print("[üå∂][notice]","[\(Date())]","[\(file.components(separatedBy: "/").last ?? "")]","[\(Thread.current.name)] \(function) ‚ñ∫",(items.first as? [Any])?.map { "\($0)"}.joined(separator: separator) ?? "")
    }
    public func debug(_ items: Any..., separator: String, terminator: String, file: String, function: String) {
        print("[üé≠][debug]","[\(Date())]","[\(file.components(separatedBy: "/").last ?? "")]","[\(Thread.current.name)] \(function) ‚ñ∫",(items.first as? [Any])?.map { "\($0)"}.joined(separator: separator) ?? "")
    }
    public func error(_ items: Any..., separator: String, terminator: String, file: String, function: String) {
        print("[üìõ][error]","[\(Date())]","[\(file.components(separatedBy: "/").last ?? "")]","[\(Thread.current.name)] \(function) ‚ñ∫",(items.first as? [Any])?.map { "\($0)"}.joined(separator: separator) ?? "")
    }
    public func fault(_ items: Any..., separator: String, terminator: String, file: String, function: String) {
        print("[‚ò¢Ô∏è][fault]","[\(Date())]","[\(file.components(separatedBy: "/").last ?? "")]","[\(Thread.current.name)] \(function) ‚ñ∫",(items.first as? [Any])?.map { "\($0)"}.joined(separator: separator) ?? "")
    }
}
